{
	"info": {
		"_postman_id": "d67e0e15-404d-4b1c-a3f9-75618a150c43",
		"name": "Protected Products",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "34260916"
	},
	"item": [
		{
			"name": "Get Products with Valid JWT",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 5000ms\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(5000);",
							"});",
							"",
							"",
							"pm.test(\"Content-Type header is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields - id, createdAt, price, department, and product\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    responseData.data.forEach(function(item) {",
							"        pm.expect(item.id).to.exist;",
							"        pm.expect(item.createdAt).to.exist;",
							"        pm.expect(item.price).to.exist;",
							"        pm.expect(item.department).to.exist;",
							"        pm.expect(item.product).to.exist;",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Validate the properties of the data object\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.data).to.be.an('array');",
							"    ",
							"    responseData.data.forEach(function (item) {",
							"        pm.expect(item.id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Id should be a non-empty string\");",
							"        pm.expect(item.price).to.be.a('number').and.to.be.at.least(0, \"Price should be a non-negative integer\");",
							"        pm.expect(item.department).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Department should be a non-empty string\");",
							"        pm.expect(item.product).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Product should be a non-empty string\");",
							"    });",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{accessToken}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://127.0.0.1:8000/products",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8000",
					"path": [
						"products"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Aggregated Products with Valid JWT",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields - status, data\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData).to.have.property('status');",
							"    pm.expect(responseData).to.have.property('data');",
							"});",
							"",
							"",
							"pm.test(\"Department and product are non-empty strings\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  ",
							"  responseData.data.forEach(function(item) {",
							"    pm.expect(item.department).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Department should not be empty\");",
							"    pm.expect(item.product).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Product should not be empty\");",
							"  });",
							"});",
							"",
							"",
							"pm.test(\"Price is a non-negative integer\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData.data).to.be.an('array');",
							"    responseData.data.forEach(function(item) {",
							"        pm.expect(item.price).to.be.a('number');",
							"        pm.expect(item.price).to.be.at.least(0);",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 5000ms\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(5000);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{adminAccessToken}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://127.0.0.1:8000/aggregated-products",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8000",
					"path": [
						"aggregated-products"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Aggregated Products with Invalid Role in JWT",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 403\", function () {",
							"  pm.expect(pm.response.code).to.equal(403);",
							"});",
							"",
							"",
							"pm.test(\"Content-Type header is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Response has the required field - detail\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.detail).to.exist;",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{accessToken}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://127.0.0.1:8000/aggregated-products",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8000",
					"path": [
						"aggregated-products"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Private Claim with Valid JWT",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 5000ms\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(5000);",
							"});",
							"",
							"",
							"pm.test(\"Content-Type header is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields - id, createdAt, price, department, and product\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    responseData.data.forEach(function(item) {",
							"        pm.expect(item.id).to.exist;",
							"        pm.expect(item.createdAt).to.exist;",
							"        pm.expect(item.price).to.exist;",
							"        pm.expect(item.department).to.exist;",
							"        pm.expect(item.product).to.exist;",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Validate the properties of the data object\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.data).to.be.an('array');",
							"    ",
							"    responseData.data.forEach(function (item) {",
							"        pm.expect(item.id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Id should be a non-empty string\");",
							"        pm.expect(item.price).to.be.a('number').and.to.be.at.least(0, \"Price should be a non-negative integer\");",
							"        pm.expect(item.department).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Department should be a non-empty string\");",
							"        pm.expect(item.product).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Product should be a non-empty string\");",
							"    });",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{accessToken}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://127.0.0.1:8000/users/private/claims",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8000",
					"path": [
						"users",
						"private",
						"claims"
					]
				}
			},
			"response": []
		}
	]
}